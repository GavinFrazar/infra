version: "3.9"

networks:
  redis-cluster:
    driver: bridge
    # allow standalone containers to attach to this network.
    # useful to debug network issues.
    attachable: true
  mongodb-replicaset:
    driver: bridge
    attachable: true
  cassandra-cluster:
    driver: bridge
    attachable: true
  cockroach-cluster:
    driver: bridge
    attachable: true

volumes:
  cockroach-certs:

services:
  postgres:
    # container_name: postgres
    build:
      context: postgres
    ports:
      - "5432:5432"
    healthcheck: &healthdefault
      # it can connect without a cert via the unix socket.
      test: ["CMD", "psql", "user=teleport-admin dbname=postgres", "--command", "select 1"]
      start_period: 60s # period where failures dont count against retry limit
      start_interval: 5s # more rapid while failures dont count
      interval: 15s # after start period, slow down in case bootstrap is taking a while
      timeout: 10s # command timeout
      retries: 5
    deploy: &deploysmall
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
    restart: on-failure
  mysql:
    # container_name: mysql
    build:
      context: mysql
    environment:
      - "MYSQL_ROOT_PASSWORD=iamroot"
    ports:
      - "3306:3306"
    healthcheck:
      <<: *healthdefault
      test: ["CMD", "mysql", "-u", "root", "--password=iamroot", -e, "select 1"]
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M # mysql is greedy idk
    restart: on-failure
  mariadb:
    # container_name: mariadb
    build:
      context: mariadb
    environment:
      - "MARIADB_ROOT_PASSWORD=iamroot"
    ports:
      - "3307:3306"
    healthcheck:
      <<: *healthdefault
      test: ["CMD", "mariadb", "-u", "root", "--password=iamroot", -e, "select 1"]
    deploy: *deploysmall
    restart: on-failure
  mongodb:
    # container_name: mongodb
    build:
      context: mongodb
    ports:
      - "27017:27017"
    # healthcheck nontrivial and not needed. Mongo starts instantly.
    deploy:
      resources:
        limits:
          cpus: '0.25'
          # mongo wiredTiger cache is not configurable below 256M, set a mem
          # limit that keeps the cache alloc (256M) under 80% of total mem.
          memory: "384M"
    restart: on-failure
  mongodb-replicaset:
    build:
      context: mongodb-replicaset/build/node-1
    networks:
      - "mongodb-replicaset"
    depends_on:
      mongodb-replicaset-node-1:
        condition: "service_healthy"
      mongodb-replicaset-node-2:
        condition: "service_healthy"
      mongodb-replicaset-node-3:
        condition: "service_healthy"
    environment:
      - "HOST=${HOST}"
    command: >-
      bash /scripts/init.sh
    deploy: *deploysmall
  mongodb-replicaset-node-1:
    build:
      context: mongodb-replicaset/build/node-1
    networks:
      - "mongodb-replicaset"
    environment:
      - "PORT=27021"
    ports:
      - "27021:27021"
    healthcheck: &mongocheck
      <<: *healthdefault
      test: ["CMD", "bash", "-c", "mongosh --host=localhost:$$PORT --tls --tlsCertificateKeyFile=/certs/adminCertKey.pem --tlsCAFile=/certs/ca.crt --eval 'db.runCommand({ ping: 1 })'"]
    command: >-
      bash -c
      "mongod
      --config /etc/mongo/mongod.conf
      --replSet myReplicaSet
      --bind_ip localhost,mongodb-replicaset-node-1
      --port $$PORT"
    deploy: *deploysmall
  mongodb-replicaset-node-2:
    build:
      context: mongodb-replicaset/build/node-2
    networks:
      - "mongodb-replicaset"
    environment:
      - "PORT=27022"
    ports:
      - "27022:27022"
    healthcheck: *mongocheck
    command: >-
      bash -c
      "mongod
      --config /etc/mongo/mongod.conf
      --replSet myReplicaSet
      --bind_ip localhost,mongodb-replicaset-node-2
      --port $$PORT"
    deploy: *deploysmall
  mongodb-replicaset-node-3:
    build:
      context: mongodb-replicaset/build/node-3
    networks:
      - "mongodb-replicaset"
    environment:
      - "PORT=27023"
    ports:
      - "27023:27023"
    healthcheck: *mongocheck
    command: >-
      bash -c
      "mongod
      --config /etc/mongo/mongod.conf
      --replSet myReplicaSet
      --bind_ip localhost,mongodb-replicaset-node-3
      --port $$PORT"
    deploy: *deploysmall
  oracle:
    # container_name: oracle
    build:
      context: oracle
    environment:
      - "ENABLE_TCPS=false"
      - "ORACLE_PWD=pass"
    ports:
      - "1521:1521"
      - "2484:2484"
  scylladb:
    # container_name: cassandra
    build:
      context: scylladb
    ports:
      - "9043:9042"
    healthcheck:
      # check if the node can print cluster description
      test: ["CMD", "bash", "-c", "nodetool describecluster"]
      start_period: 60s # period where failures dont count against retry limit
      start_interval: 5s # more rapid while failures dont count
      interval: 15s # after start period, slow down in case bootstrap is taking a while
      timeout: 10s # command timeout
      retries: 5
    environment:
      - "HEAP_NEWSIZE=512M" # 1/4 of max heap
      - "MAX_HEAP_SIZE=2048M" # should be less than the container limit with some good margin.
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    restart: on-failure
  cassandra:
    build:
      context: cassandra
    ports:
      - "9042:9042"
    healthcheck: &casscheck
      # check if the node can print cluster description and there are not any
      # nodes marked UNREACHABLE in the cluster description.
      test: ["CMD", "bash", "-c", "set -eo pipefail; nodetool describecluster | grep -v UNREACHABLE | grep 'Joining: 0'"]
      start_period: 60s # period where failures dont count against retry limit
      start_interval: 5s # more rapid while failures dont count
      interval: 15s # after start period, slow down in case bootstrap is taking a while
      timeout: 10s # command timeout
      retries: 5
    environment:
      - "HEAP_NEWSIZE=256M" # 1/4 of max heap
      - "MAX_HEAP_SIZE=1024M" # should be less than the container limit with some good margin.
    deploy: &cassdeploy
      resources:
        limits:
          cpus: '0.5'
          memory: 2G
    restart: on-failure
# --- CASSANDRA CLUSTER START ---
  cassandra-cluster:
    build:
      context: cassandra-cluster
    depends_on:
      # start the nodes one at a time after the seed node starts.
      cassandra-cluster-node:
        condition: "service_healthy"
    networks:
      - cassandra-cluster
    ports:
      - "9051:9042"
    healthcheck: *casscheck
    environment: &cassenv # save env into "cassenv" to share it with all nodes
      - "CASSANDRA_LISTEN_ADDRESS=auto" # the default. listen on container's ip.
      - "CASSANDRA_CLUSTER_NAME=mycluster"
      - "CASSANDRA_SEEDS=cassandra-cluster-seed"
      - "CASSANDRA_DC=mars"
      - "CASSANDRA_RACK=somerack"
      - "CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch"
      - "CASSANDRA_NUM_TOKENS=128"
      - "HEAP_NEWSIZE=256M" # 1/4 of max heap
      - "MAX_HEAP_SIZE=1024M" # should be less than the container limit with some good margin.
    deploy: *cassdeploy
    restart: on-failure
  cassandra-cluster-node:
    build:
      context: cassandra-cluster
    depends_on:
      # start the nodes one at a time after the seed node starts.
      cassandra-cluster-seed:
        condition: "service_healthy"
    networks:
      - cassandra-cluster
    ports:
      - "9052:9042"
    healthcheck: *casscheck # same health check for each node.
    environment: *cassenv # same env for each node.
    deploy: *cassdeploy
    restart: on-failure
  cassandra-cluster-seed:
    build:
      context: cassandra-cluster
    networks:
      - cassandra-cluster
    ports:
      - "9053:9042"
    healthcheck: *casscheck # same health check for each node.
    environment: *cassenv # same env for each node.
    deploy: *cassdeploy
    restart: on-failure
  clickhouse:
    build:
      context: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
      - "8443:8443"
      - "9440:9440"
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "512M"
  elasticsearch:
    build:
      context: elasticsearch
    environment:
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    healthcheck:
      <<: *healthdefault
      test: [
        "CMD", "curl", "-k",
        "--cert", "/usr/share/elasticsearch/config/certs/cert",
        "--key", "/usr/share/elasticsearch/config/certs/key",
        "-X", "GET",
        "https://${HOST}:9200/_cluster/health?wait_for_status=green&timeout=60s"
      ]
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"
    restart: on-failure
  redis:
    build:
      context: redis
    ports:
      - "6379:6379"
    deploy: &redisdeploy
      resources:
        limits:
          cpus: "0.25"
          memory: "32M"
  redis-cluster:
    build:
      context: redis-cluster/build/node-1
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    networks:
      - "redis-cluster"
    environment:
      - "REDISCLI_AUTH=somepassword"
      - "CERT_DIR=/usr/local/etc/redis/certs"
    command: >-
      bash -c
      "redis-cli
      --user alice
      --tls
      --cacert $$CERT_DIR/rootca.crt
      --cert $$CERT_DIR/client.crt
      --key $$CERT_DIR/client.key
      --cluster-yes
      --cluster-replicas 1
      --cluster create
      redis-node-1:7001
      redis-node-2:7002
      redis-node-3:7003
      redis-node-4:7004
      redis-node-5:7005
      redis-node-6:7006"
    deploy: *redisdeploy
  redis-node-1:
    build:
      context: redis-cluster/build/node-1
    ports:
      - "7001:7001"
      - "17001:17001"
    networks:
      - "redis-cluster"
    hostname: redis-node-1
    deploy: *redisdeploy
  redis-node-2:
    build:
      context: redis-cluster/build/node-2
    ports:
      - "7002:7002"
      - "17002:17002"
    networks:
      - "redis-cluster"
    hostname: redis-node-2
    deploy: *redisdeploy
  redis-node-3:
    build:
      context: redis-cluster/build/node-3
    ports:
      - "7003:7003"
      - "17003:17003"
    networks:
      - "redis-cluster"
    hostname: redis-node-3
    deploy: *redisdeploy
  redis-node-4:
    build:
      context: redis-cluster/build/node-4
    ports:
      - "7004:7004"
      - "17004:17004"
    networks:
      - "redis-cluster"
    hostname: redis-node-4
    deploy: *redisdeploy
  redis-node-5:
    build:
      context: redis-cluster/build/node-5
    ports:
      - "7005:7005"
      - "17005:17005"
    networks:
      - "redis-cluster"
    hostname: redis-node-5
    deploy: *redisdeploy
  redis-node-6:
    build:
      context: redis-cluster/build/node-6
    ports:
      - "7006:7006"
      - "17006:17006"
    networks:
      - "redis-cluster"
    hostname: redis-node-6
    deploy: *redisdeploy

  cockroach-node-1: &roachnode
    hostname: "cockroach-node-1"
    depends_on:
      create-cockroach-cluster-ca:
        condition: "service_completed_successfully"
    build:
      context: "cockroach-cluster"
    # build:
    #   context: "cockroach-cluster/build/node-1"
    environment: &roachenv
      CA_DIR: "/ca"
      COCKROACH_CERTS_DIR: "/certs"
      ADVERTISE_PORT: "26261"
      ADVERTISE_HTTP_PORT: "8081"
    ports:
      - "26261:26257"
      - "8081:8080"
    volumes:
      - "cockroach-certs:/ca"
    networks:
      - "cockroach-cluster"
    deploy: &roachdeploy
      resources:
        limits:
          cpus: "0.25"
          memory: "512M"
    command: >-
      bash -c
      "cp $$CA_DIR/ca.crt $$COCKROACH_CERTS_DIR &&

      cat
      $$COCKROACH_CERTS_DIR/ca.crt
      $$COCKROACH_CERTS_DIR/out/ca-client.crt >
      $$COCKROACH_CERTS_DIR/ca-client.crt &&

      cockroach cert create-node
      localhost 127.0.0.1
      ${HOST} $$HOSTNAME
      --certs-dir=$$COCKROACH_CERTS_DIR
      --ca-key=$$CA_DIR/ca.key &&

      cockroach start
      --logtostderr
      --certs-dir=$$COCKROACH_CERTS_DIR
      --advertise-addr=${HOST}:$$ADVERTISE_PORT
      --advertise-sql-addr=${HOST}:$$ADVERTISE_PORT
      --advertise-http-addr=${HOST}:$$ADVERTISE_HTTP_PORT
      --join=${HOST}:26261,${HOST}:26262,${HOST}:26263"
  cockroach-node-2:
    <<: *roachnode
    hostname: "cockroach-node-2"
    # build:
    #   context: "cockroach-cluster/build/node-2"
    environment:
      <<: *roachenv
      ADVERTISE_PORT: "26262"
      ADVERTISE_HTTP_PORT: "8082"
    ports:
      - "26262:26257"
      - "8082:8080"
  cockroach-node-3:
    <<: *roachnode
    hostname: "cockroach-node-3"
    # build:
    #   context: "cockroach-cluster/build/node-3"
    environment:
      <<: *roachenv
      ADVERTISE_PORT: "26263"
      ADVERTISE_HTTP_PORT: "8083"
    ports:
      - "26263:26257"
      - "8083:8080"
  cockroach-cluster:
    <<: *roachnode
    hostname: "cockroach-cluster"
    depends_on:
      - cockroach-node-1
      - cockroach-node-2
      - cockroach-node-3
      - create-cockroach-cluster-ca
    ports: []
    command: >-
      bash -c
      "cockroach cert create-client root
      --certs-dir=$$CA_DIR
      --ca-key=$$CA_DIR/ca.key &&

      cockroach init
      --certs-dir=/ca
      --host=${HOST}:$$ADVERTISE_PORT"
  create-cockroach-cluster-ca:
    <<: *roachnode
    hostname: "create-cockroach-cluster-ca"
    depends_on: []
    ports: []
    command: >-
      bash -c
      "cat $$CA_DIR/ca.crt ||

      cockroach cert create-ca
      --certs-dir=$$CA_DIR
      --ca-key=$$CA_DIR/ca.key"

  cockroach:
    build:
      context: cockroach
    ports:
      - "26257:26257"
      - "8080:8080"
    healthcheck:
      <<: *healthdefault
      test: ["CMD", "cockroach", "sql", "--certs-dir=/certs/out", "-e", "select 1"]
    deploy: *roachdeploy
